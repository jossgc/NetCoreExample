variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'any cpu'

trigger: 
 batch: true
 branches:
  include:
    - developer
  exclude:
    - master
 paths:
  exclude:
    - README.md
    - azure-pipelines.yml
    - azure-pipelines-1.yml
    - Templates/azure-pipelines.yml

stages:
- stage: Build
  jobs:
  - job: Build
    pool: Default
    continueOnError: true
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.102'
      inputs:
        version: 3.1.102
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: 'WebApplication1/WebApplication1.csproj'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: 'WebApplication1/WebApplication1.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)'
        artifactName: drop
      condition: succeededOrFailed()

- stage: Deploy
  jobs:
    # track deployments on the environment
  - deployment: DeployWeb
    pool: Default      
    # creates an environment if it doesn’t exist
    environment: 'Stage'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - download: current
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'ServConnForTraining'
              appType: 'webAppLinux'
              WebAppName: '3rdwave'
              deployToSlotOrASE: true
              ResourceGroupName: '3rdwave'
              SlotName: 'Staging'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
              RuntimeStack: 'DOTNETCORE|3.1'

- stage: Deploy_Production
  jobs:
    # track deployments on the environment
  - deployment: Swap_to_Production
    pool:
      vmImage: 'ubuntu-latest'
    # creates an environment if it doesn’t exist
    environment: 'Production'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - download: current
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'ServConnForTraining'
              Action: 'Swap Slots'
              WebAppName: '3rdwave'
              ResourceGroupName: '3rdwave'
              SourceSlot: 'Staging'




